REQUIREMENTS
==============
OS: 2016, 2012 R2 64, 10, 8.1
.NET: 4.6.2 or later
SOLR: 6.6.1
CPU: 4 core, 16gb RAM
Powershell: v5.0 or later
Web Platform Installer v5
SQL Server Data Tier Application Framework (DAC Fx) 17.1
Java Runtime Environment (for SOLR ssl key generation on dev environments)

SOLR on port 8983
SOLR has no user/password
SOLR is SSL

Web Deploy 3.6 For Hosting Servers
URL Rewrite 2.1



Installation
================
1.  Configure Contained Database Authentication on the SQL Server

sp_configure 'contained database authentication', 1; 
GO 
RECONFIGURE; 
GO

2.  Configure SOLR
- Install Bitnami 6.6.1 to c:\solr
- Use port 8080
- remove user authentication

edit C:\solr\apache-solr\conf\solr.conf
Remove the LocationMatch section

- enable ssl in SOLR via a self signed cert

Run the powershell script as an admin: .\solr-ssl.ps1 -KeystoreFile C:\Solr\apache-solr\server\etc\solr-ssl.keystore.jks 

Update c:\solr\apache-solr\bin\solr.in.cmd:

set SOLR_SSL_KEY_STORE=etc/solr-ssl.keystore.jks
set SOLR_SSL_KEY_STORE_PASSWORD=secret
set SOLR_SSL_TRUST_STORE=etc/solr-ssl.keystore.jks
set SOLR_SSL_TRUST_STORE_PASSWORD=secret

Open the Bitnami console and restart the services.  
Stop the apache service.

3.  Install the Sitecore Installation Framework

Run the following powershell commands
- Register-PSRepository -Name SitecoreGallery -SourceLocation https://sitecore.myget.org/F/sc-powershell/api/v2
- Install-Module SitecoreInstallFramework
- Update-Module SitecoreInstallFramework

4.  Configure the Sitecore Install

- create the directory C:\resourcefiles
- Copy install.ps1 to the resourcefiles directory
- Set the following variables in install.ps1

$SolrUrl = "https://localhost:8983/solr" 
$SolrRoot = "C:\solr\apache-solr" 
$SolrService = "solr" 
$SqlServer = ".\BCBCE3SHO1042LK" 
$SqlAdminUser = "cplocal" 
$SqlAdminPassword="k8XxakN="

5.  Install Sitecore
- from the c:\resourcefiles directory run the install.ps1 powershell script

6. Rebuild the search indexes
- On the Sitecore Launchpad, click Control Panel, and in the Indexing section, click Indexing manager.
- In the Indexing Manager dialog box, click Select all, and then click Rebuild

7. Rebuild the link databases
- On the Sitecore Launchpad, click Control Panel, and in the Database section, click Rebuild Link Databases.
- Select the Master and Core databases and then click Rebuild.

8. Deploy Marketing Definitions
- On the Sitecore Launchpad, click Control Panel, Analytics, and then click Deploy Marketing Definitions.
- In the Deploy marketing definitions dialog box, select all the definitions and taxonomies and click Deploy.

9.  Install the Web Forms for Marketers package

10.  Add to the web.config under the configuration\system.webServer\handlers node:

<add name="CaptchaImage" verb="*" path="CaptchaImage.axd" type="Sitecore.Form.Core.Pipeline.RequestProcessor.CaptchaResolver, Sitecore.Forms.Core" />
<add name="CaptchaAudio" verb="*" path="CaptchaAudio.axd" type="Sitecore.Form.Core.Pipeline.RequestProcessor.CaptchaResolver, Sitecore.Forms.Core" />

11.  Run the following script on the reporting database:

--Create FormFieldValues 
IF NOT EXISTS (SELECT * 
                 FROM INFORMATION_SCHEMA.TABLES 
                 WHERE TABLE_SCHEMA = 'dbo' 
                 AND  TABLE_NAME = 'FormFieldValues')
BEGIN
	CREATE TABLE [dbo].[FormFieldValues](
		[SubmitId] [uniqueidentifier] NOT NULL,
		[FieldId] [uniqueidentifier] NOT NULL,
		[FieldName] [nvarchar](max) NOT NULL,
		[FieldValue] [nvarchar](max) NULL
	) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

	CREATE NONCLUSTERED INDEX IX_FormFieldValues_SubmitId ON FormFieldValues (SubmitId); 
END

--Create Fact_FormSummary
IF NOT EXISTS (SELECT * 
                 FROM INFORMATION_SCHEMA.TABLES 
                 WHERE TABLE_SCHEMA = 'dbo' 
                 AND  TABLE_NAME = 'Fact_FormSummary')
BEGIN
	CREATE TABLE [dbo].[Fact_FormSummary](
		[Id] [uniqueidentifier] NOT NULL,
		[FormId] [uniqueidentifier] NOT NULL,
		[ContactId] [uniqueidentifier] NOT NULL,
		[InteractionId] [uniqueidentifier] NOT NULL,
		[Created] [smalldatetime] NOT NULL,
		[Count] [int] NOT NULL,
	 CONSTRAINT [PK_Fact_FormSummary] PRIMARY KEY CLUSTERED 
	(
		[Id] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	) ON [PRIMARY]

	CREATE NONCLUSTERED INDEX IX_FormSummary_FormId ON [Fact_FormSummary] (FormId); 
END

--Create Fact_FormEvents
IF NOT EXISTS (SELECT * 
                 FROM INFORMATION_SCHEMA.TABLES 
                 WHERE TABLE_SCHEMA = 'dbo' 
                 AND  TABLE_NAME = 'Fact_FormEvents')
BEGIN
	CREATE TABLE [dbo].[Fact_FormEvents](
		[ContactId] uniqueidentifier NOT NULL,	
		[InteractionId] uniqueidentifier NOT NULL,
		[InteractionStartDate] smalldatetime NOT NULL,
		[PageEventDefinitionId] uniqueidentifier NOT NULL,
		[FormId] uniqueidentifier NOT NULL,
		[Count] int NOT NULL,
		CONSTRAINT [PK_FormEvents] PRIMARY KEY ([ContactId], [InteractionId], [InteractionStartDate], [PageEventDefinitionId], [FormId])
	)
END

--Create Fact_FormStatisticsByContact
IF NOT EXISTS (SELECT * 
                 FROM INFORMATION_SCHEMA.TABLES 
                 WHERE TABLE_SCHEMA = 'dbo' 
                 AND  TABLE_NAME = 'Fact_FormStatisticsByContact')
BEGIN
CREATE TABLE [dbo].[Fact_FormStatisticsByContact](
	[ContactId] uniqueidentifier NOT NULL,
	[FormId] uniqueidentifier NOT NULL,
	[LastInteractionDate] smalldatetime NOT NULL,
        [Submits]  int NOT NULL,
        [Success]  int NOT NULL,
        [Dropouts]  int NOT NULL,
        [Failures]  int NOT NULL,
        [Visits]  int NOT NULL,
        [Value]  int NOT NULL,
        [FinalResult] int NOT NULL
	CONSTRAINT [PK_FormStatisticsByContact] PRIMARY KEY ([ContactId], [LastInteractionDate], [FormId])
)
END

GO

--Drop Add_FormStatisticsByContact procedure if exists
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_NAME = 'Add_FormStatisticsByContact')
BEGIN
	DROP PROCEDURE [dbo].[Add_FormStatisticsByContact]
END

GO

--Create Add_FormStatisticsByContact procedure
CREATE PROCEDURE [dbo].[Add_FormStatisticsByContact]
  @ContactId [uniqueidentifier],
  @FormId [uniqueidentifier],
  @LastInteractionDate [datetime],
  @Submits [int],
  @Success [int],
  @Dropouts [int],
  @Failures [int],
  @Visits [int],
  @Value [int],
  @FinalResult [int]
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY
		MERGE [dbo].[Fact_FormStatisticsByContact] AS t
		USING
		(
		  VALUES
		  (
			@ContactId,
			@FormId,
			@LastInteractionDate,
			@Submits,
			@Success,
			@Dropouts,
			@Failures,
			@Visits,
			@Value,
			@FinalResult
		  )
		)
		as s
		(
		  [ContactId],
		  [FormId],
		  [LastInteractionDate],
			[Submits],
			[Success],
			[Dropouts],
			[Failures],
			[Visits],
			[Value],
			[FinalResult]
		)
		ON
		(
		  t.[ContactId] = s.[ContactId] AND
		  t.[FormId] = s.[FormId]
		)
		WHEN MATCHED and (t.[LastInteractionDate] < s.[LastInteractionDate]) THEN UPDATE SET 
		  t.[LastInteractionDate] = s.[LastInteractionDate],
		  t.[Submits] = s.[Submits],
		  t.[Success] = s.[Success],
		  t.[Dropouts] = s.[Dropouts],
		  t.[Failures] = s.[Failures],
		  t.[Visits] = s.[Visits],
		  t.[Value] = s.[Value],
		  t.[FinalResult] = s.[FinalResult]
		WHEN NOT MATCHED THEN
		  INSERT(
		  [ContactId],
		  [FormId],
		  [LastInteractionDate],
			[Submits],
			[Success],
			[Dropouts],
			[Failures],
			[Visits],
			[Value],
			[FinalResult]
			)
		  VALUES(
		  s.[ContactId],
		  s.[FormId],
		  s.[LastInteractionDate],
			s.[Submits],
			s.[Success],
			s.[Dropouts],
			s.[Failures],
			s.[Visits],
			s.[Value],
			s.[FinalResult]
			);
	END TRY
	BEGIN CATCH
		DECLARE @error_number INTEGER = ERROR_NUMBER();
		DECLARE @error_severity INTEGER = ERROR_SEVERITY();
		DECLARE @error_state INTEGER = ERROR_STATE();
		DECLARE @error_message NVARCHAR(4000) = ERROR_MESSAGE();
		DECLARE @error_procedure SYSNAME = ERROR_PROCEDURE();
		DECLARE @error_line INTEGER = ERROR_LINE();
		RAISERROR( N'T-SQL ERROR %d, SEVERITY %d, STATE %d, PROCEDURE %s, LINE %d, MESSAGE: %s', @error_severity, 1, @error_number, @error_severity, @error_state, @error_procedure, @error_line, @error_message ) WITH NOWAIT;
	END CATCH;
END;

GO

12.  Confirm the wfm connection string is in the connection.strings

13.  Publish to web






